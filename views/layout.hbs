<!DOCTYPE html>
<html>
  <head>
    <title>Quickstart for MSAL JS</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bluebird/3.3.4/bluebird.min.js"></script>
    <script src="https://secure.aadcdn.microsoftonline-p.com/lib/1.0.0/js/msal.js"></script>
    <style type="text/css">
      * {box-sizing: border-box}

/* Add padding to containers */
.container {
  padding: 16px;
}

/* Full-width input fields */
input[type=text], input[type=password] {
  width: 100%;
  padding: 15px;
  margin: 5px 0 22px 0;
  display: inline-block;
  border: none;
  background: #f1f1f1;
}

input[type=text]:focus, input[type=password]:focus {
  background-color: #ddd;
  outline: none;
}

/* Overwrite default styles of hr */
hr {
  border: 1px solid #f1f1f1;
  margin-bottom: 25px;
}

/* Set a style for the submit/register button */
.registerbtn {
  background-color: #4CAF50;
  color: white;
  padding: 16px 20px;
  margin: 8px 0;
  border: none;
  cursor: pointer;
  width: 100%;
  opacity: 0.9;
}

.registerbtn:hover {
  opacity:1;
}

/* Add a blue text color to links */
a {
  color: dodgerblue;
}

/* Set a grey background color and center the text of the "sign in" section */
.signin {
  background-color: #f1f1f1;
  text-align: center;
}
    </style>
  </head>
  <body>
  	<h2>Welcome to MSAL.js Quickstart</h2>
<br />
<h4 id="WelcomeMessage"></h4>
<button id="SignIn" onclick="signIn()">Sign In</button><br /><br />
<pre id="json"></pre>

 <form id="registForm" style="display: none" action="action_page.php">
  <div class="container">
    <h1>Register</h1>
    <p>Please fill in this form to create an account.</p>
    <hr>

    <label for="email"><b>Email</b></label>
    <input type="text" placeholder="Enter Email" name="email" required>

    <label for="psw"><b>Password</b></label>
    <input type="password" placeholder="Enter Password" name="psw" required>

    <label for="psw-repeat"><b>Repeat Password</b></label>
    <input type="password" placeholder="Repeat Password" name="psw-repeat" required>
    <hr>

    <p>By creating an account you agree to our <a href="#">Terms & Privacy</a>.</p>
    <button type="submit" class="registerbtn">Register</button>
  </div>

  <div class="container signin">
    <p>Already have an account? <a href="#">Sign in</a>.</p>
  </div>
</form> 
    <script>
      // Select DOM elements to work with
      const welcomeDiv = document.getElementById("WelcomeMessage");
      const loginButton = document.getElementById("SignIn");
      const jsonPre = document.getElementById("json");

      // Config object to be passed to Msal on creation
      var msalConfig = {
    auth: {
        clientId: "",
        authority: "",
        redirectURI: "http://localhost:30662/"
    },
    cache: {
        cacheLocation: "localStorage",
        storeAuthStateInCookie: true
    }
};

      const graphConfig = {
        graphMeEndpoint: "https://graph.microsoft.com/beta/me"
      };

      //
      const requestObj = {
        scopes: ["user.read"]
      };

      // Create the main myMSALObj instance
      const myMSALObj = new Msal.UserAgentApplication(msalConfig);

      // Register Callbacks for redirect flow
      myMSALObj.handleRedirectCallback(authRedirectCallBack);

      async function signIn() {
        try {
          await myMSALObj.loginPopup(requestObj);

          // Login Success

          showWelcomeMessage();
          acquireTokenPopupAndCallMSGraph();
        } catch (error) {
          console.error(error);
        }
      }

      async function acquireTokenPopupAndCallMSGraph() {
        let tokenResponse;
        try {
          // try and get the token silently in the background
          tokenResponse = await myMSALObj.acquireTokenSilent(requestObj);
        } catch (error) {
          console.log(error);
          // if the silent request failed, it might be because the user
          // needs to request one interactively via a pop-up or redirect
          if (requiresInteraction(error.errorCode)) {
            try {
              // try and get the token with an interactive pop-up window
              tokenResponse = await myMSALObj.acquireTokenPopup(requestObj);
            } catch (error) {
              console.log(error);
            }
          }
        }
        callMSGraph(
          graphConfig.graphMeEndpoint,
          tokenResponse.accessToken,
          graphAPICallback
        );
      }

      function graphAPICallback(data) {
        var studentId = data.onPremisesSamAccountName;
        var urlFindUser = "http://localhost:8000/findUser/" + studentId;

        var xhr = new XMLHttpRequest(), req;
        xhr.open("GET", urlFindUser, true);
        xhr.setRequestHeader("Content-Type", "application/json");
        xhr.setRequestHeader("Access-Control-Allow-Origin", "*");
        xhr.onreadystatechange = function () {
          if (this.readyState === 4 && this.status === 200) {
            req = JSON.parse(this.responseText);
            if (req.status == false) addUser(data);
            else console.log("User already exists");
          }
        };
        xhr.send();
      }

      function addUser(data) {
        var text = '{ "displayName": "' + data.displayName + '", "givenName": "' + data.givenName + '", "mail": "' + data.mail + '", "studentId": "' + data.onPremisesSamAccountName + '", "surname": "' + data.surname + '" }';
        const urlAddUser = "http://localhost:8000/addUser";

        var xhr = new XMLHttpRequest();
        xhr.open("POST", urlAddUser, true);
        xhr.setRequestHeader("Content-Type", "application/json");
        xhr.setRequestHeader("Access-Control-Allow-Origin", "*");
        xhr.onreadystatechange = function () {};
        xhr.send(text);
      }

      function showWelcomeMessage() {
        welcomeDiv.innerHTML = `Welcome ${
          myMSALObj.getAccount().userName
        } to Microsoft Graph API`;

        // Change the login button to log out
        loginButton.setAttribute("onclick", "signOut();");
        loginButton.innerHTML = "Sign Out";
      }

      // This function can be removed if you do not need to support IE
      async function acquireTokenRedirectAndCallMSGraph() {
        try {
          // Always start with acquireTokenSilent to obtain a token in the signed in user from cache
          const tokenResponse = myMSALObj.acquireTokenSilent(requestObj);
          callMSGraph(
            graphConfig.graphMeEndpoint,
            tokenResponse.accessToken,
            graphAPICallback
          );
        } catch (error) {
          console.log(error);
          // Upon acquireTokenSilent failure (due to consent or interaction or login required ONLY)
          // Call acquireTokenRedirect
          if (requiresInteraction(error.errorCode)) {
            myMSALObj.acquireTokenRedirect(requestObj);
          }
        }
      }

      function authRedirectCallBack(error, response) {
        if (error) {
          console.log(error);
        } else {
          if (response.tokenType === "access_token") {
            callMSGraph(
              graphConfig.graphEndpoint,
              response.accessToken,
              graphAPICallback
            );
          } else {
            console.log("token type is: %s", 0);
          }
        }
      }

      function requiresInteraction(errorCode) {
        if (!errorCode || !errorCode.length) {
          return false;
        }
        return (
          errorCode === "consent_required" ||
          errorCode === "interaction_required" ||
          errorCode === "login_required"
        );
      }

      // Browser check variables
      const ua = window.navigator.userAgent;
      const msie = ua.indexOf("MSIE ");
      const msie11 = ua.indexOf("Trident/");
      const msedge = ua.indexOf("Edge/");
      const isIE = msie > 0 || msie11 > 0;
      const isEdge = msedge > 0;

      // If you support IE, our recommendation is that you sign-in using Redirect APIs
      // If you as a developer are testing using Edge InPrivate mode, please add "isEdge" to the if check
      // can change this to default an experience outside browser use
      const loginType = isIE ? "REDIRECT" : "POPUP";

      if (loginType === "POPUP") {
        if (myMSALObj.getAccount()) {
          // avoid duplicate code execution on page load in case of iframe and popup window.
          showWelcomeMessage();
          acquireTokenPopupAndCallMSGraph();
        }
      } else if (loginType === "REDIRECT") {
        signIn.onclick = function() {
          myMSALObj.loginRedirect(requestObj);
        };
        if (
          myMSALObj.getAccount() &&
          !myMSALObj.isCallback(window.location.hash)
        ) {
          // avoid duplicate code execution on page load in case of iframe and popup window.
          showWelcomeMessage();
          acquireTokenRedirectAndCallMSGraph();
        }
      } else {
        console.error("Please set a valid login type");
      }

      function signOut() {
        myMSALObj.logout();
      }

      async function callMSGraph(theUrl, accessToken, callback) {
        const xmlHttp = new XMLHttpRequest();
        xmlHttp.onreadystatechange = function() {
          if (this.readyState === 4 && this.status === 200)
            callback(JSON.parse(this.responseText));
        };
        xmlHttp.open("GET", theUrl, true); // true for asynchronous
        xmlHttp.setRequestHeader("Authorization", `Bearer ${accessToken}`);
        xmlHttp.send();
      }
    </script>
  </body>
</html>
